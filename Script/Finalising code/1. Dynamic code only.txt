//------------------------------------------------Start Dynamic code--------------------------------------
// Initialize arrays to store 1m close prices
var float[] ce1mCloses = array.new_float(0)
var float[] pe1mCloses = array.new_float(0)

// Initialize variables to store strike prices
var float strikePriceAtm = na
var float strikePriceAbove = na
var float strikePriceBelow = na

// Variables to store the sums and averages
var float cePeSumAtm = na
var float dynamicAvgATM = na
var float dynamicAvgOTM = na
var float dynamicAvgITM = na

// Fetch and store 1m close prices for the user-defined strike price and its 2nd levels
if barstate.isconfirmed
    // Store strike prices in separate variables
    strikePriceAtm := strikePrice
    strikePriceAbove := strikePrice + 2 * strikeInterval
    strikePriceBelow := strikePrice - 2 * strikeInterval

    // Fetch and store for the user-defined strike price (ATM)
    ce1mCloseAtm = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceAtm), "1", close)
    pe1mCloseAtm = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceAtm), "1", close)
    array.push(ce1mCloses, ce1mCloseAtm)
    array.push(pe1mCloses, pe1mCloseAtm)

    // Intrinsic Value Calculations
    ce_intrinsic_value = math.max(livePrice - strikePriceAtm, 0) // Call Option Intrinsic Value
    pe_intrinsic_value = math.max(strikePriceAtm - livePrice, 0) // Put Option Intrinsic Value

    // Extrinsic Value Calculations
    ce_extrinsic_value = ce1mCloseAtm - ce_intrinsic_value
    pe_extrinsic_value = pe1mCloseAtm - pe_intrinsic_value

    // Calculate the sum of CE and PE closes for the ATM strike price
    cePeSumAtm := ce_extrinsic_value + pe_extrinsic_value

    // Calculate the average of CE and PE closes for the ATM strike price
    dynamicAvgATM := (ce1mCloseAtm + pe1mCloseAtm) / 2

    // Fetch and store for the 2nd level above the strike price (CE)
    ce1mCloseAbove = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceAbove), "1", close)
    array.push(ce1mCloses, ce1mCloseAbove)

    // Fetch and store for the 2nd level below the strike price (PE)
    pe1mCloseBelow = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceBelow), "1", close)
    array.push(pe1mCloses, pe1mCloseBelow)

    // Calculate the average of CE closes (2nd level above) and PE closes (2nd level below)
    dynamicAvgOTM := (ce1mCloseAbove + pe1mCloseBelow) / 2

    // Fetch and store for the 2nd level below the strike price (CE)
    ce1mCloseBelow = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceBelow), "1", close)
    array.push(ce1mCloses, ce1mCloseBelow)

    // Fetch and store for the 2nd level above the strike price (PE)
    pe1mCloseAbove = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceAbove), "1", close)
    array.push(pe1mCloses, pe1mCloseAbove)

    // Calculate the average of CE closes (2nd level below) and PE closes (2nd level above)
    dynamicAvgITM := (ce1mCloseBelow + pe1mCloseAbove) / 2

// Plot the sum of CE and PE closes for the ATM strike price
plot(plotCePeSumAtm ? cePeSumAtm : na, title="Magic DYML", color=color.blue, linewidth=2)

// Plot the average of CE closes (2nd level below) and PE closes (2nd level above)
plot(dynamicAvgCloseLevels ? dynamicAvgITM : na, title="MGL-Upper", color=color.green, linewidth=2)

// Plot the average of CE and PE closes for the ATM strike price
plot(dynamicAvgCloseLevels ? dynamicAvgATM : na, title="MGL-Middle", color=color.orange, linewidth=2)

// Plot the average of CE closes (2nd level above) and PE closes (2nd level below)
plot(dynamicAvgCloseLevels ? dynamicAvgOTM : na, title="MGL-Lower", color=color.red, linewidth=2)
//------------------------------End of dynamic code----------------------------------------------------------------

//------------------------------Dynamic signal start---------------------------------------------------------------

// Calculate buy conditions (for OTM line) and sell conditions (for ITM line)
dynamicBuyOTM = ta.crossover(close, dynamicAvgOTM) or (low <= dynamicAvgOTM and close > dynamicAvgOTM)
dynamicSellOTM = ta.crossunder(close, dynamicAvgITM) or (high >= dynamicAvgITM and close < dynamicAvgITM)

// Add similar buy and sell conditions for ATM line
dynamicBuyATM = ta.crossover(close, dynamicAvgATM) or (low <= dynamicAvgATM and close > dynamicAvgATM)
dynamicSellATM = ta.crossunder(close, dynamicAvgATM) or (high >= dynamicAvgATM and close < dynamicAvgATM)

// Plot buy signals with green arrows below the candle (if checkbox is enabled)
plotshape(dynamicSignal ? dynamicBuyOTM : false, title="Buy Signal OTM", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(dynamicSignal ? dynamicBuyATM : false, title="Buy Signal ATM", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)

// Plot sell signals with red arrows above the candle (if checkbox is enabled)
plotshape(dynamicSignal ? dynamicSellOTM : false, title="Sell Signal ITM", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)
plotshape(dynamicSignal ? dynamicSellATM : false, title="Sell Signal ATM", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

//----------------------------------------------Dynamic signal End--------------------------------------------------