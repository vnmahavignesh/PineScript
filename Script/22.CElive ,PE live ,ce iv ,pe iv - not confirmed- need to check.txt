//@version=6
indicator("Nifty Symbol", overlay=true)

// ==========================================
// Inputs
// ==========================================
// Symbol Selection
symbolInput = input.string("NIFTY", "Trading Symbol (e.g., NIFTY, RELIANCE, TCS)", group="General Settings")

// Strike Price and Levels
strikePrice = input.int(23000, "Strike Price", group="Strike Settings", inline="STRIKE")
strikeInterval = input.int(50, "Interval", group="Strike Settings", inline="STRIKE")
numLevels = input.int(5, "Levels", minval=1, maxval=10, group="Strike Settings", inline="STRIKE")

// Expiration Date
expDay = input.string("27", "ExpDay", group="Expiration Settings", inline="EXP")
expMonth = input.string("02", "ExpMonth", group="Expiration Settings", inline="EXP")
expYear = input.string("25", "ExpYear", group="Expiration Settings", inline="EXP")

// Display Options
showTable = input.bool(true, "TB", group="Display Options",inline="DO")

// Adjusted Strike Prices
showAdjustedStrikePrices = input.bool(true, "GN", group="Display Options",inline="DO")

// Support and Resistance
showSupportResistance = input.bool(false, "U.IDX", group="Display Options",inline="DO")
showSupportResistanceLevels = input.bool(false, title="A.IDX", group="Display Options",inline="DO")

// Avg Close Levels
showAvgCloseLevels = input.bool(true, "STL", group="Display Options",inline="DO")

// Checkboxes for enabling/disabling plots
dynamicAvgCloseLevels = input.bool(false, "DYL", group="Display Options",inline="DO")
plotCePeSumAtm = input.bool(false, "CPL", group="Display Options",inline="DO")

// Checkboxes for CE and PE OHLC for user-defined strike price
showOHLC = input.bool(title="OHLC", defval=false, group="Display Options",inline="DO")

// Input checkboxes to toggle signals
dynamicSignal = input.bool(true, title="Dsig",  group="Display Options",inline="DO")

displayMode = input.string("Show All Levels", "Display Mode", 
     options=["CE Only", "PE Only", "Hide All Levels", "Show All Levels"], 
     group="Display Options")

labelSize = input.string("Normal", "Label Size", options=["Auto", "Tiny", "Small", "Normal", "Large", "Huge"], group="Display Options")

// Add table font size option
tableFontSize = input.string("Normal", "Table Font Size", options=["Tiny", "Small", "Normal", "Large", "Huge"], group="Display Options")

// Add this to the "Display Options" input group
tablePosition = input.string("Top Right", "Table Position", 
     options=["Top Left", "Top Right", "Top Center", "Bottom Left", "Bottom Right", "Bottom Center", "Middle Left", "Middle Right", "Middle Center"], 
     group="Display Options")

maxTableRows = input.int(10, "Max Table Rows", minval=1, maxval=50, group="Display Options")

time_to_expiration = input(10, title="Time to Expiration (days)") / 365
risk_free_rate = input(0.05, title="Risk-Free Rate")

// Approximation for the standard normal CDF (normcdf)
normcdf(x) =>
    y = math.abs(x) / math.sqrt(2)
    a1 = 0.0705230784
    a2 = 0.0422820123
    a3 = 0.0092705272
    a4 = 0.0001520143
    a5 = 0.0002765672
    a6 = 0.0000430638
    t = 1.0 / (1.0 + y * (a1 + y * (a2 + y * (a3 + y * (a4 + y * (a5 + y * a6))))))
    result = 1.0 - 0.5 * math.pow(t, 16)
    if x < 0
        result := 1.0 - result
    result

// Approximation for the standard normal PDF (normpdf)
normpdf(x) =>
    (1.0 / math.sqrt(2 * math.pi)) * math.exp(-0.5 * x * x)

// Black-Scholes formula for call option price
black_scholes_call_price(s, k, r, t, iv) =>
    d1 = (math.log(s / k) + (r + iv * iv / 2) * t) / (iv * math.sqrt(t))
    d2 = d1 - iv * math.sqrt(t)
    s * normcdf(d1) - k * math.exp(-r * t) * normcdf(d2)

// Black-Scholes formula for put option price
black_scholes_put_price(s, k, r, t, iv) =>
    d1 = (math.log(s / k) + (r + iv * iv / 2) * t) / (iv * math.sqrt(t))
    d2 = d1 - iv * math.sqrt(t)
    k * math.exp(-r * t) * normcdf(-d2) - s * normcdf(-d1)

// Newton-Raphson method to find IV
newton_raphson_iv(s, k, r, t, option_price, initial_guess=0.5, tolerance=0.0001, max_iterations=100) =>
    iv = initial_guess
    for i = 0 to max_iterations
        price = black_scholes_call_price(s, k, r, t, iv)
        vega = s * normpdf((math.log(s / k) + (r + iv * iv / 2) * t) / (iv * math.sqrt(t))) * math.sqrt(t)
        iv := iv - (price - option_price) / vega
        if math.abs(price - option_price) < tolerance
            break
    iv



// ==========================================
// Functions
// ==========================================

// Function to get data with proper error handling
getdata(instrument, tf) =>
    [rOpen, rClose, rVolume, prhigh, prlow] = request.security(instrument, timeframe=tf, expression=[open, close[1], math.round(volume/10000000 * 10), high[1], low[1]], lookahead=barmerge.lookahead_off, ignore_invalid_symbol=true)

[todayDayOpen, prevDayHigh, prevDayLow, prevDayClose] = request.security(syminfo.tickerid, "D", [open, high[1], low[1], close[1]])

// Fetch live price of Nifty
livePrice = request.security(symbolInput, timeframe.period, close)

// Function to sort indices based on volume
sortIndicesByVolume(volumes) =>
    indices = array.new_int(array.size(volumes))
    for i = 0 to array.size(indices) - 1
        array.set(indices, i, i)
    
    // Bubble sort indices based on volumes
    for i = 0 to array.size(indices) - 2
        for j = 0 to array.size(indices) - 2 - i
            if array.get(volumes, array.get(indices, j)) < array.get(volumes, array.get(indices, j + 1))
                temp = array.get(indices, j)
                array.set(indices, j, array.get(indices, j + 1))
                array.set(indices, j + 1, temp)
    indices

// Function to convert label size string to size enum
getLabelSize(size) =>
    switch size
        "Auto" => size.auto
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge

// Function to convert table font size string to size enum
getTableFontSize(size) =>
    switch size
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge

getTablePosition(pos) =>
    switch pos
        "Top Left" => position.top_left
        "Top Right" => position.top_right
        "Top Center" => position.top_center
        "Bottom Left" => position.bottom_left
        "Bottom Right" => position.bottom_right
        "Bottom Center" => position.bottom_center
        "Middle Left" => position.middle_left
        "Middle Right" => position.middle_right
        "Middle Center" => position.middle_center



// ==========================================
// Main Logic
// ==========================================

// Initialize arrays for symbols and data
var string[] CEsymbols = array.new_string(numLevels * 2 + 1)
var string[] PEsymbols = array.new_string(numLevels * 2 + 1)
var float[] strikes = array.new_float(numLevels * 2 + 1)

// Combined arrays for CE and PE data
var float[] combinedStrikes = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedOpens = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedCloses = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedVolumes = array.new_float((numLevels * 2 + 1) * 2)
var bool[] isCE = array.new_bool((numLevels * 2 + 1) * 2)
var string[] combinedSymbols = array.new_string((numLevels * 2 + 1) * 2)
var float[] combinedPrHighs = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedPrLows = array.new_float((numLevels * 2 + 1) * 2)

// Store previous day's bar index
var int prevDayIndex = na

// Update previous day's index when a new day starts
if dayofweek != dayofweek[1]
    prevDayIndex := bar_index[1]

// Generate symbols only once
if barstate.isfirst
    for i = 0 to numLevels * 2
        strike = strikePrice + (strikeInterval * (i - numLevels))
        array.set(strikes, i, strike)
        
        ceSymbol = symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strike)
        peSymbol = symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strike)
        
        array.set(CEsymbols, i, ceSymbol)
        array.set(PEsymbols, i, peSymbol)

// Fetch and combine CE and PE data
for i = 0 to numLevels * 2
    [ceOpen, ceClose, ceVolume, cePrhigh, cePrLow] = getdata(array.get(CEsymbols, i), "D")
    [peOpen, peClose, peVolume, pePrhigh, pePrLow] = getdata(array.get(PEsymbols, i), "D")
    
    // Store CE data
    array.set(combinedStrikes, i, array.get(strikes, i))
    array.set(combinedOpens, i, ceOpen)
    array.set(combinedCloses, i, ceClose)
    array.set(combinedVolumes, i, ceVolume)
    array.set(isCE, i, true)
    array.set(combinedSymbols, i, array.get(CEsymbols, i))
    array.set(combinedPrHighs, i, cePrhigh)
    array.set(combinedPrLows, i, cePrLow)

    // Store PE data
    array.set(combinedStrikes, i + numLevels * 2 + 1, array.get(strikes, i))
    array.set(combinedOpens, i + numLevels * 2 + 1, peOpen)
    array.set(combinedCloses, i + numLevels * 2 + 1, peClose)
    array.set(combinedVolumes, i + numLevels * 2 + 1, peVolume)
    array.set(isCE, i + numLevels * 2 + 1, false)
    array.set(combinedSymbols, i + numLevels * 2 + 1, array.get(PEsymbols, i))
    array.set(combinedPrHighs, i + numLevels * 2 + 1, pePrhigh)
    array.set(combinedPrLows, i + numLevels * 2 + 1, pePrLow)

// Sort indices by volume
var int[] sortedIdx = array.new_int(array.size(combinedVolumes))
if barstate.islast
    sortedIdx := sortIndicesByVolume(combinedVolumes)

// Fetch the 1st CE and PE strike prices
var float firstCEStrike = na
var float firstPEStrike = na

if barstate.islast
    for i = 0 to array.size(sortedIdx) - 1
        idx = array.get(sortedIdx, i)
        strike = array.get(combinedStrikes, idx)
        
        // Check if the strike is a multiple of 100
        if strike % 100 == 0
            if array.get(isCE, idx) and na(firstCEStrike)
                firstCEStrike := strike
            else if not array.get(isCE, idx) and na(firstPEStrike)
                firstPEStrike := strike
        
        // Break the loop if both CE and PE strikes are found
        if not na(firstCEStrike) and not na(firstPEStrike)
            break

// Calculate the difference between the strike prices
var float srStrikePrice = na
if not na(firstCEStrike) and not na(firstPEStrike)
    srStrikePrice := (firstCEStrike + firstPEStrike)/2    

// Fetch live prices for the srStrikePrice of CE and PE
var float ceLivePrice = na
var float peLivePrice = na
var float iv_call = na
var float iv_put = na

if not na(srStrikePrice) and barstate.islast
    ceSymbol = symbolInput + expYear + expMonth + expDay + "C" + str.tostring(srStrikePrice)
    peSymbol = symbolInput + expYear + expMonth + expDay + "P" + str.tostring(srStrikePrice)
    
    ceLivePrice := request.security(ceSymbol, "1", close, lookahead=barmerge.lookahead_off, ignore_invalid_symbol=true)
    peLivePrice := request.security(peSymbol, "1", close, lookahead=barmerge.lookahead_off, ignore_invalid_symbol=true) 
    // Calculate IV for Call and Put
    iv_call := newton_raphson_iv(livePrice, srStrikePrice, risk_free_rate, time_to_expiration, ceLivePrice)
    iv_put := newton_raphson_iv(livePrice, srStrikePrice, risk_free_rate, time_to_expiration, peLivePrice)

// Get the font size for the table
var tableCellsTextSize = getTableFontSize(tableFontSize)
    
// Then, in the table creation and population section:
if barstate.islast and showTable
    var table sortedTable = table.new(getTablePosition(tablePosition), 8, maxTableRows + 2, bgcolor=color.white, border_width=1, frame_color=color.black, frame_width=1, border_color=color.black)
    
    // Add live price of Nifty as the first row
    table.cell(sortedTable, 0, 0, "LTP", bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 1, 0, symbolInput, bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 2, 0, "L:"+str.tostring(livePrice), bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 3, 0, "T:"+str.tostring(todayDayOpen), bgcolor=color.new(color.blue, 90))    
    table.cell(sortedTable, 4, 0, "C:"+str.tostring(firstCEStrike), bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 5, 0, "P:"+str.tostring(firstPEStrike), bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 6, 0, "S:"+str.tostring(srStrikePrice), bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 7, 0, "celive:"+str.tostring(ceLivePrice)+"pelive:"+str.tostring(peLivePrice)+"ivc:"+str.tostring(iv_call)+"ivp:"+str.tostring(iv_put), bgcolor=color.new(color.blue, 90))

    // Table headers with specified font size
    table.cell(sortedTable, 0, 1, "No", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 1, 1, "STRIKE", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 2, 1, "SYM", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)   
    table.cell(sortedTable, 3, 1, "Open", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 4, 1, "Close", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 5, 1, "QTY", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 6, 1, "QTP", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
    table.cell(sortedTable, 7, 1, "ROC", bgcolor=color.new(color.gray, 70), text_size=tableCellsTextSize)
        
    // Fill table with sorted data, limiting to maxTableRows
    for i = 0 to math.min(maxTableRows - 1, array.size(sortedIdx) - 1)
        idx = array.get(sortedIdx, i)
        bgColor = array.get(isCE, idx) ? color.new(#05f30d, 10) : color.new(color.red, 90)   // Light green for CE, light red for PE
        type = array.get(isCE, idx) ? "CE" : "PE"
        txtColor = color.black  // Light green for CE, light red for PE

        // Calculate percentage change in volume
        openVolume = array.get(combinedOpens, idx)
        currentVolume = array.get(combinedVolumes, idx)
        volumeChangePct = na(openVolume) or openVolume == 0 ? na : ((currentVolume - openVolume) / openVolume) * 100
        
        // Calculate ROC for volume        
        prevVolume = array.get(combinedVolumes, idx)[1]
        roc = na(prevVolume) or prevVolume == 0 ? na : ((currentVolume - prevVolume) / prevVolume) * 100

        // Display ROC value or placeholder
        rocDisplay = na(roc) ? "-" : str.tostring(roc, "#.##") + "%"
        
        table.cell(sortedTable, 0, i + 2, str.tostring(i + 1), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 1, i + 2, str.tostring(array.get(combinedStrikes, idx)), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 2, i + 2, type, bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)        
        table.cell(sortedTable, 3, i + 2, str.tostring(array.get(combinedOpens, idx)), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 4, i + 2, str.tostring(array.get(combinedCloses, idx)), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 5, i + 2, str.tostring(array.get(combinedVolumes, idx)), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 6, i + 2, str.tostring(volumeChangePct, "#"), bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
        table.cell(sortedTable, 7, i + 2, rocDisplay, bgcolor=bgColor, text_size=tableCellsTextSize, text_color=txtColor)
            
// Draw horizontal lines and labels
for i = 0 to array.size(sortedIdx) - 1
    idx = array.get(sortedIdx, i)
    strike = array.get(combinedStrikes, idx)
    closePrice = array.get(combinedCloses, idx)
    isCe = array.get(isCE, idx)    
    
    // Skip if openPrice is NaN
    if not na(closePrice) and not na(prevDayIndex)
        // Determine if line should be drawn based on display mode
        drawLine = switch displayMode
            "CE Only" => isCe
            "PE Only" => not isCe
            "Hide All Levels" => false
            "Show All Levels" => true
        
        if drawLine
            lineColor = isCe ? color.green : color.red
            labelColor = isCe ? color.green : color.red
            
            // Draw horizontal line from open price
            line.new(prevDayIndex, closePrice, bar_index, closePrice, color=lineColor, width=1, extend=extend.right)
            
            // Label the strike price with user-selected size
            label.new(prevDayIndex, closePrice, str.tostring(strike), color=labelColor, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Draw horizontal lines and labels for adjusted strike prices
if showAdjustedStrikePrices
    for i = 0 to array.size(sortedIdx) - 1
        idx = array.get(sortedIdx, i)
        strike = array.get(combinedStrikes, idx)
        closePrice = array.get(combinedCloses, idx)
        isCe = array.get(isCE, idx)        

        // Skip if closePrice is NaN
        if not na(closePrice)
            if isCe
                ceAdjustedStrikePrice = strike - closePrice
                // Draw horizontal line for CE adjusted strike price
                line.new(prevDayIndex, ceAdjustedStrikePrice, bar_index, ceAdjustedStrikePrice, color=color.green, width=1, extend=extend.right)
                // Label the CE adjusted strike price
                label.new(prevDayIndex, ceAdjustedStrikePrice, text=str.tostring(strike), color=color.green, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
            else
                peAdjustedStrikePrice = strike + closePrice
                // Draw horizontal line for PE adjusted strike price
                line.new(prevDayIndex, peAdjustedStrikePrice, bar_index, peAdjustedStrikePrice, color=color.red, width=1, extend=extend.right)
                // Label the PE adjusted strike price
                label.new(prevDayIndex, peAdjustedStrikePrice, text=str.tostring(strike), color=color.red, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
        
// Calculate the CE and PE close prices for srStrikePrice
var float ceCloseAtSrStrike = na
var float peCloseAtSrStrike = na

if not na(srStrikePrice)
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == srStrikePrice
            if array.get(isCE, i)
                ceCloseAtSrStrike := array.get(combinedCloses, i)
            else
                peCloseAtSrStrike := array.get(combinedCloses, i)

// Calculate support and resistance levels
var float minor_support_new = na
var float minor_resistance_new = na
var float major_support_new = na
var float major_resistance_new = na

if not na(srStrikePrice) and not na(ceCloseAtSrStrike) and not na(peCloseAtSrStrike)
    minor_support_new := srStrikePrice - peCloseAtSrStrike
    minor_resistance_new := srStrikePrice + ceCloseAtSrStrike
    major_support_new := srStrikePrice - (ceCloseAtSrStrike + peCloseAtSrStrike)
    major_resistance_new := srStrikePrice + (ceCloseAtSrStrike + peCloseAtSrStrike)

// Draw support and resistance lines and labels (only if checkbox is enabled)
if showSupportResistanceLevels
    if not na(minor_support_new)
        line.new(x1=prevDayIndex, y1=minor_support_new, x2=bar_index, y2=minor_support_new, color=color.black, width=1, extend = extend.right)
        label.new(x=prevDayIndex, y=minor_support_new, text="Minor Support", color=color.black, textcolor=color.white, style=label.style_label_down,size=getLabelSize(labelSize))

    if not na(minor_resistance_new)
        line.new(x1=prevDayIndex, y1=minor_resistance_new, x2=bar_index, y2=minor_resistance_new, color=color.black, width=1, extend = extend.right)
        label.new(x=prevDayIndex, y=minor_resistance_new, text="Minor Resistance", color=color.black, textcolor=color.white, style=label.style_label_down,size=getLabelSize(labelSize))

    if not na(major_support_new)
        line.new(x1=prevDayIndex, y1=major_support_new, x2=bar_index, y2=major_support_new, color=color.black, width=1, extend = extend.right)
        label.new(x=prevDayIndex, y=major_support_new, text="Major Support", color=color.black, textcolor=color.white, style=label.style_label_down,size=getLabelSize(labelSize))
    
    if not na(major_resistance_new)
        line.new(x1=prevDayIndex, y1=major_resistance_new, x2=bar_index, y2=major_resistance_new, color=color.black, width=1, extend = extend.right)
        label.new(x=prevDayIndex, y=major_resistance_new, text="Major Resistance", color=color.black, textcolor=color.white, style=label.style_label_down,size=getLabelSize(labelSize))

// Calculate and draw the sum of CE close and PE close for the user-specified strike price
var float avgCloseATM = na // Make avgCloseOTM available globally
if barstate.islast
    // Find the correct index for the specified strike price
    targetIndex = -1
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice
            targetIndex := i
            break
    
    // If a matching strike price is found
    if targetIndex != -1
        // Determine the corresponding CE and PE indices
        ceIndex = targetIndex < numLevels * 2 + 1 ? targetIndex : targetIndex - (numLevels * 2 + 1)
        peIndex = targetIndex < numLevels * 2 + 1 ? targetIndex + (numLevels * 2 + 1) : targetIndex
        
        ceClose = array.get(combinedCloses, ceIndex)
        peClose = array.get(combinedCloses, peIndex)
        ceHigh = array.get(combinedPrHighs, ceIndex)
        ceLow = array.get(combinedPrLows, ceIndex)
        peHigh = array.get(combinedPrHighs, peIndex)
        peLow = array.get(combinedPrLows, peIndex)
        ceOpen = array.get(combinedOpens, ceIndex)
        peOpen = array.get(combinedOpens, peIndex)   

        if not na(ceClose) and not na(peClose)
            avgCloseATM := (ceClose + peClose) / 2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseATM, bar_index, avgCloseATM, color=color.olive, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseATM, "ATM", color=color.olive, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
            // Draw the SR Levels
            minor_support = strikePrice - peClose 
            minor_resistance = strikePrice + ceClose
            major_support = strikePrice - (ceClose + peClose)
            major_resistance = strikePrice + (ceClose + peClose)

            // Draw and label the support and resistance levels if the checkbox is enabled
            if showSupportResistance
                // Draw horizontal line for minor_support
                line.new(prevDayIndex, minor_support, bar_index, minor_support, color=color.black, width=1, extend=extend.right)
                
                // Label the minor_support
                label.new(prevDayIndex, minor_support, "Minor support", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

                // Draw horizontal line for minor_resistance
                line.new(prevDayIndex, minor_resistance, bar_index, minor_resistance, color=color.black, width=1, extend=extend.right)
                
                // Label the minor_resistance
                label.new(prevDayIndex, minor_resistance, "Minor resistance", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

                // Draw horizontal line for major_support
                line.new(prevDayIndex, major_support, bar_index, major_support, color=color.black, width=1, extend=extend.right)
                
                // Label the major_support
                label.new(prevDayIndex, major_support, "Major support", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
               
                // Draw horizontal line for major_resistance
                line.new(prevDayIndex, major_resistance, bar_index, major_resistance, color=color.black, width=1, extend=extend.right)
                
                // Label the major_resistance
                label.new(prevDayIndex, major_resistance, "Major resistance", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Calculate the sum of CE previous day close of below 2nd level and PE previous day close of above 2nd level for user-defined strike price
var float avgCloseITM = na // Make avgCloseOTM available globally
if barstate.islast
    // Find the indices for the 2nd level below and above the user-defined strike price
    ceBelow2ndLevelIndex = -1
    peAbove2ndLevelIndex = -1
    
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice - 2 * strikeInterval and array.get(isCE, i)
            ceBelow2ndLevelIndex := i
        if array.get(combinedStrikes, i) == strikePrice + 2 * strikeInterval and not array.get(isCE, i)
            peAbove2ndLevelIndex := i
    
    // If both indices are found
    if ceBelow2ndLevelIndex != -1 and peAbove2ndLevelIndex != -1
        ceCloseBelow2ndLevel = array.get(combinedCloses, ceBelow2ndLevelIndex)
        peCloseAbove2ndLevel = array.get(combinedCloses, peAbove2ndLevelIndex)
        
        if not na(ceCloseBelow2ndLevel) and not na(peCloseAbove2ndLevel)
            avgCloseITM := (ceCloseBelow2ndLevel + peCloseAbove2ndLevel) / 2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseITM, bar_index, avgCloseITM, color=color.purple, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseITM, "ITM", color=color.purple, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Calculate the sum of CE previous day close of above 2nd level and PE previous day close of below 2nd level for user-defined strike price
var float avgCloseOTM = na // Make avgCloseOTM available globally
if barstate.islast
    // Find the indices for the 2nd level below and above the user-defined strike price
    ceAbove2ndLevelIndex = -1
    peBelow2ndLevelIndex = -1
    
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice + 2 * strikeInterval and array.get(isCE, i)
            ceAbove2ndLevelIndex := i
        if array.get(combinedStrikes, i) == strikePrice - 2 * strikeInterval and not array.get(isCE, i)
            peBelow2ndLevelIndex := i
    
    // If both indices are found
    if ceAbove2ndLevelIndex != -1 and peBelow2ndLevelIndex != -1
        ceCloseAbove2ndLevel = array.get(combinedCloses, ceAbove2ndLevelIndex)
        peCloseBelow2ndLevel = array.get(combinedCloses, peBelow2ndLevelIndex)
        
        if not na(ceCloseAbove2ndLevel) and not na(peCloseBelow2ndLevel)
            avgCloseOTM := (ceCloseAbove2ndLevel + peCloseBelow2ndLevel) / 2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseOTM, bar_index, avgCloseOTM, color=color.orange, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseOTM, "OTM", color=color.orange, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

//------------------------------------------------Start Dynamic code--------------------------------------
// Initialize arrays to store 1m close prices
var float[] ce1mCloses = array.new_float(0)
var float[] pe1mCloses = array.new_float(0)

// Initialize variables to store strike prices
var float strikePriceAtm = na
var float strikePriceAbove = na
var float strikePriceBelow = na

// Variables to store the sums and averages
var float cePeSumAtm = na
var float dynamicAvgATM = na
var float dynamicAvgOTM = na
var float dynamicAvgITM = na

// Fetch and store 1m close prices for the user-defined strike price and its 2nd levels
if barstate.isconfirmed
    // Store strike prices in separate variables
    strikePriceAtm := strikePrice
    strikePriceAbove := strikePrice + 2 * strikeInterval
    strikePriceBelow := strikePrice - 2 * strikeInterval

    // Fetch and store for the user-defined strike price (ATM)
    ce1mCloseAtm = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceAtm), "1", close)
    pe1mCloseAtm = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceAtm), "1", close)
    array.push(ce1mCloses, ce1mCloseAtm)
    array.push(pe1mCloses, pe1mCloseAtm)

    // Intrinsic Value Calculations
    ce_intrinsic_value = math.max(livePrice - strikePriceAtm, 0) // Call Option Intrinsic Value
    pe_intrinsic_value = math.max(strikePriceAtm - livePrice, 0) // Put Option Intrinsic Value

    // Extrinsic Value Calculations
    ce_extrinsic_value = ce1mCloseAtm - ce_intrinsic_value
    pe_extrinsic_value = pe1mCloseAtm - pe_intrinsic_value

    // Calculate the sum of CE and PE closes for the ATM strike price
    cePeSumAtm := ce_extrinsic_value + pe_extrinsic_value

    // Calculate the average of CE and PE closes for the ATM strike price
    dynamicAvgATM := (ce1mCloseAtm + pe1mCloseAtm) / 2

    // Fetch and store for the 2nd level above the strike price (CE)
    ce1mCloseAbove = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceAbove), "1", close)
    array.push(ce1mCloses, ce1mCloseAbove)

    // Fetch and store for the 2nd level below the strike price (PE)
    pe1mCloseBelow = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceBelow), "1", close)
    array.push(pe1mCloses, pe1mCloseBelow)

    // Calculate the average of CE closes (2nd level above) and PE closes (2nd level below)
    dynamicAvgOTM := (ce1mCloseAbove + pe1mCloseBelow) / 2

    // Fetch and store for the 2nd level below the strike price (CE)
    ce1mCloseBelow = request.security(symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strikePriceBelow), "1", close)
    array.push(ce1mCloses, ce1mCloseBelow)

    // Fetch and store for the 2nd level above the strike price (PE)
    pe1mCloseAbove = request.security(symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strikePriceAbove), "1", close)
    array.push(pe1mCloses, pe1mCloseAbove)

    // Calculate the average of CE closes (2nd level below) and PE closes (2nd level above)
    dynamicAvgITM := (ce1mCloseBelow + pe1mCloseAbove) / 2

// Plot the sum of CE and PE closes for the ATM strike price
plot(plotCePeSumAtm ? cePeSumAtm : na, title="Magic DYML", color=color.blue, linewidth=2)

// Plot the average of CE closes (2nd level below) and PE closes (2nd level above)
plot(dynamicAvgCloseLevels ? dynamicAvgITM : na, title="MGL-Upper", color=color.green, linewidth=2)

// Plot the average of CE and PE closes for the ATM strike price
plot(dynamicAvgCloseLevels ? dynamicAvgATM : na, title="MGL-Middle", color=color.orange, linewidth=2)

// Plot the average of CE closes (2nd level above) and PE closes (2nd level below)
plot(dynamicAvgCloseLevels ? dynamicAvgOTM : na, title="MGL-Lower", color=color.red, linewidth=2)
//------------------------------End of dynamic code----------------------------------------------------------------

//------------------------------Dynamic signal start---------------------------------------------------------------

// Calculate buy conditions (for OTM line) and sell conditions (for ITM line)
dynamicBuyOTM = ta.crossover(close, dynamicAvgOTM) or (low <= dynamicAvgOTM and close > dynamicAvgOTM)
dynamicSellOTM = ta.crossunder(close, dynamicAvgITM) or (high >= dynamicAvgITM and close < dynamicAvgITM)

// Add similar buy and sell conditions for ATM line
dynamicBuyATM = ta.crossover(close, dynamicAvgATM) or (low <= dynamicAvgATM and close > dynamicAvgATM)
dynamicSellATM = ta.crossunder(close, dynamicAvgATM) or (high >= dynamicAvgATM and close < dynamicAvgATM)

// Plot buy signals with green arrows below the candle (if checkbox is enabled)
plotshape(dynamicSignal ? dynamicBuyOTM : false, title="Buy Signal OTM", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(dynamicSignal ? dynamicBuyATM : false, title="Buy Signal ATM", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)

// Plot sell signals with red arrows above the candle (if checkbox is enabled)
plotshape(dynamicSignal ? dynamicSellOTM : false, title="Sell Signal ITM", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)
plotshape(dynamicSignal ? dynamicSellATM : false, title="Sell Signal ATM", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

//----------------------------------------------Dynamic signal End--------------------------------------------------
// Drawing the OHLC Line
// Declare line and label variables
var line openLine = na
var line highLine = na
var line lowLine = na
var line closeLine = na
var label openLabel = na
var label highLabel = na
var label lowLabel = na
var label closeLabel = na

// Function to create and manage lines
create_line(float price, color lineColor, bool showOHLC) =>
    line line_ref = na
    if (not na(price) and showOHLC)
        line_ref := line.new(
             prevDayIndex, 
             price, 
             bar_index, 
             price, 
             color=lineColor, 
             width=1, 
             style=line.style_solid, 
             extend=extend.right)
    line_ref

// Function to create and manage labels
create_label(float price, string labelText, color labelColor, bool showOHLC) =>
    label label_ref = na
    if (not na(price) and showOHLC)
        label_ref := label.new(
             bar_index + 40,
             price, 
             text=labelText , 
             color=labelColor, 
             textcolor=color.white, 
             style=label.style_label_left, 
             yloc=yloc.price)
    label_ref

// Delete previous lines and labels
if (not na(openLine))
    line.delete(openLine)
if (not na(highLine))
    line.delete(highLine)
if (not na(lowLine))
    line.delete(lowLine)
if (not na(closeLine))
    line.delete(closeLine)

if (not na(openLabel))
    label.delete(openLabel)
if (not na(highLabel))
    label.delete(highLabel)
if (not na(lowLabel))
    label.delete(lowLabel)
if (not na(closeLabel))
    label.delete(closeLabel)

// Create lines
openLine := create_line(todayDayOpen, color.blue, showOHLC)
highLine := create_line(prevDayHigh, color.red, showOHLC)
lowLine := create_line(prevDayLow, color.green, showOHLC)
closeLine := create_line(prevDayClose, color.orange, showOHLC)

// Create labels
openLabel := create_label(todayDayOpen, "O ", color.blue, showOHLC)
highLabel := create_label(prevDayHigh, "H ", color.red, showOHLC)
lowLabel := create_label(prevDayLow, "L ", color.green, showOHLC)
closeLabel := create_label(prevDayClose, "C ", color.orange, showOHLC)