//@version=6
indicator("Symbol and Nifty", overlay=true)

// ==========================================
// Inputs
// ==========================================
var string DEFAULT_SYMBOL = "NIFTY"
symbolInput = input.string(DEFAULT_SYMBOL, "Trading Symbol", confirm=true, group="General Settings")
// Get symbol information
symInfo = request.security(symbolInput, timeframe.period, close)
// Display Options
showTable = input.bool(true, "Show Options Table", group="Display Options")
displayMode = input.string("Show All Levels", "Display Mode", 
     options=["CE Only", "PE Only", "Hide All Levels", "Show All Levels"], 
     group="Display Options")
labelSize = input.string("Normal", "Label Size", options=["Auto", "Tiny", "Small", "Normal", "Large", "Huge"], group="Display Options")
// Nifty Options
strikePrice = input.int(23700, "Nifty Strike Price", group="Nifty Options",inline = "NF")
strikeInterval = input.int(50, "Strike Interval", group="Nifty Options",inline = "NF")
numLevels = input.int(5, "Number of Levels", minval=1, maxval=10, group="Nifty Options",inline = "NF")
// Expiration
expDay = input.string("13", "Expiration Day", group="Nifty Options",inline = "NF-2")
expMonth = input.string("02", "Expiration Month", group="Nifty Options",inline = "NF-2")
expYear = input.string("25", "Expiration Year", group="Nifty Options",inline = "NF-2")

// Support and Resistance
showSupportResistance = input.bool(true, "Show Support and Resistance Levels", group="Support and Resistance")

// Adjusted Strike Prices
showAdjustedStrikePrices = input.bool(true, "Show Adjusted Strike Prices", group="Adjusted Strike Prices")

// Avg Close Levels
showAvgCloseLevels = input.bool(true, "Show Avg Close Levels (ATM, ITM, OTM)", group="Display Options")

// ==========================================
// Functions
// ==========================================
// Function to create organized strike levels
createOrganizedStrikeLevels(basePrice, interval, levels) =>
    strikes = array.new_float(2 * levels + 1)
    midIndex = levels
    array.set(strikes, midIndex, basePrice)
    for i = 1 to levels
        array.set(strikes, midIndex - i, basePrice - (interval * i))
        array.set(strikes, midIndex + i, basePrice + (interval * i))
    strikes

// Function to get data with proper error handling
getdata(instrument, tf) =>
    [rOpen, rClose, rVolume] = request.security(instrument, timeframe=tf, expression=[close, close[1], volume / strikeInterval], lookahead=barmerge.lookahead_off, ignore_invalid_symbol=true)

// Function to sort indices based on volume
sortIndicesByVolume(volumes) =>
    indices = array.new_int(array.size(volumes))
    for i = 0 to array.size(indices) - 1
        array.set(indices, i, i)
    
    // Bubble sort indices based on volumes
    for i = 0 to array.size(indices) - 2
        for j = 0 to array.size(indices) - 2 - i
            if array.get(volumes, array.get(indices, j)) < array.get(volumes, array.get(indices, j + 1))
                temp = array.get(indices, j)
                array.set(indices, j, array.get(indices, j + 1))
                array.set(indices, j + 1, temp)
    indices

// Function to convert label size string to size enum
getLabelSize(size) =>
    switch size
        "Auto" => size.auto
        "Tiny" => size.tiny
        "Small" => size.small
        "Normal" => size.normal
        "Large" => size.large
        "Huge" => size.huge

// ==========================================
// Main Logic
// ==========================================
var strikeLevels = createOrganizedStrikeLevels(strikePrice, strikeInterval, numLevels)

// Initialize arrays for symbols and data
var string[] CEsymbols = array.new_string(numLevels * 2 + 1)
var string[] PEsymbols = array.new_string(numLevels * 2 + 1)
var float[] strikes = array.new_float(numLevels * 2 + 1)

// Combined arrays for CE and PE data
var float[] combinedStrikes = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedOpens = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedCloses = array.new_float((numLevels * 2 + 1) * 2)
var float[] combinedVolumes = array.new_float((numLevels * 2 + 1) * 2)
var bool[] isCE = array.new_bool((numLevels * 2 + 1) * 2)
var string[] combinedSymbols = array.new_string((numLevels * 2 + 1) * 2)

// Store previous day's bar index
var int prevDayIndex = na

// Update previous day's index when a new day starts
if dayofweek != dayofweek[1]
    prevDayIndex := bar_index[1]

// Generate symbols only once
if barstate.isfirst
    for i = 0 to numLevels * 2
        strike = strikePrice + (strikeInterval * (i - numLevels))
        array.set(strikes, i, strike)
        
        ceSymbol = symbolInput + expYear + expMonth + expDay + "C" + str.tostring(strike)
        peSymbol = symbolInput + expYear + expMonth + expDay + "P" + str.tostring(strike)
        
        array.set(CEsymbols, i, ceSymbol)
        array.set(PEsymbols, i, peSymbol)

// Fetch and combine CE and PE data
for i = 0 to numLevels * 2
    [ceOpen, ceClose, ceVolume] = getdata(array.get(CEsymbols, i), "D")
    [peOpen, peClose, peVolume] = getdata(array.get(PEsymbols, i), "D")
    
    // Store CE data
    array.set(combinedStrikes, i, array.get(strikes, i))
    array.set(combinedOpens, i, ceOpen)
    array.set(combinedCloses, i, ceClose)
    array.set(combinedVolumes, i, ceVolume)
    array.set(isCE, i, true)
    array.set(combinedSymbols, i, array.get(CEsymbols, i))
    
    // Store PE data
    array.set(combinedStrikes, i + numLevels * 2 + 1, array.get(strikes, i))
    array.set(combinedOpens, i + numLevels * 2 + 1, peOpen)
    array.set(combinedCloses, i + numLevels * 2 + 1, peClose)
    array.set(combinedVolumes, i + numLevels * 2 + 1, peVolume)
    array.set(isCE, i + numLevels * 2 + 1, false)
    array.set(combinedSymbols, i + numLevels * 2 + 1, array.get(PEsymbols, i))

// Sort indices by volume
var int[] sortedIdx = array.new_int(array.size(combinedVolumes))
if barstate.islast
    sortedIdx := sortIndicesByVolume(combinedVolumes)

// Fetch live price of Nifty
niftyLivePrice = request.security(symbolInput, timeframe.period, close)

// Create and display the sorted table
if barstate.islast and showTable
    var table sortedTable = table.new(position.top_right, 6, 50, bgcolor=color.white, border_color=color.black, border_width=1)
    
    // Table headers
    table.cell(sortedTable, 0, 1, "Rank", bgcolor=color.new(color.gray, 70))
    table.cell(sortedTable, 1, 1, "Symbol", bgcolor=color.new(color.gray, 70))
    table.cell(sortedTable, 2, 1, "Strike", bgcolor=color.new(color.gray, 70))
    table.cell(sortedTable, 3, 1, "Open", bgcolor=color.new(color.gray, 70))
    table.cell(sortedTable, 4, 1, "Close", bgcolor=color.new(color.gray, 70))
    table.cell(sortedTable, 5, 1, "Volume", bgcolor=color.new(color.gray, 70))
    
    // Add live price of Nifty as the first row
    table.cell(sortedTable, 0, 0, "Live Price", bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 1, 0, symbolInput, bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 2, 0, str.tostring(niftyLivePrice), bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 3, 0, "", bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 4, 0, "", bgcolor=color.new(color.blue, 90))
    table.cell(sortedTable, 5, 0, "", bgcolor=color.new(color.blue, 90))
        
    // Fill table with sorted data
    for i = 0 to array.size(sortedIdx) - 1
        idx = array.get(sortedIdx, i)
        bgColor = array.get(isCE, idx) ? color.new(color.green, 90) : color.new(color.red, 90)  // Light green for CE, light red for PE
        type = array.get(isCE, idx) ? "CE" : "PE"
        
        table.cell(sortedTable, 0, i + 2, str.tostring(i + 1), bgcolor=bgColor)
        table.cell(sortedTable, 1, i + 2, type, bgcolor=bgColor)
        table.cell(sortedTable, 2, i + 2, str.tostring(array.get(combinedStrikes, idx)), bgcolor=bgColor)
        table.cell(sortedTable, 3, i + 2, str.tostring(array.get(combinedOpens, idx)), bgcolor=bgColor)
        table.cell(sortedTable, 4, i + 2, str.tostring(array.get(combinedCloses, idx)), bgcolor=bgColor)
        table.cell(sortedTable, 5, i + 2, str.tostring(array.get(combinedVolumes, idx)), bgcolor=bgColor)
    

    
// Draw horizontal lines and labels
for i = 0 to array.size(sortedIdx) - 1
    idx = array.get(sortedIdx, i)
    strike = array.get(combinedStrikes, idx)
    closePrice = array.get(combinedCloses, idx)
    isCe = array.get(isCE, idx)
    
    // Skip if openPrice is NaN
    if not na(closePrice) and not na(prevDayIndex)
        // Determine if line should be drawn based on display mode
        drawLine = switch displayMode
            "CE Only" => isCe
            "PE Only" => not isCe
            "Hide All Levels" => false
            "Show All Levels" => true
        
        if drawLine
            lineColor = isCe ? color.green : color.red
            labelColor = isCe ? color.green : color.red
            
            // Draw horizontal line from open price
            line.new(prevDayIndex, closePrice, bar_index , closePrice, color=lineColor, width=1, extend=extend.right)
            
            // Label the strike price with user-selected size
            label.new(prevDayIndex, closePrice, str.tostring(strike), color=labelColor, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Skip if closePrice is NaN
        if not na(closePrice)
            if isCe
                ceAdjustedStrikePrice = strike - closePrice
                // Draw horizontal line for CE adjusted strike price
                line.new(prevDayIndex, ceAdjustedStrikePrice, bar_index, ceAdjustedStrikePrice, color=color.green, width=1, extend=extend.right)
                // Label the CE adjusted strike price
                label.new(prevDayIndex, ceAdjustedStrikePrice, text=str.tostring(strike), color=color.green, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
            else
                peAdjustedStrikePrice = strike + closePrice
                // Draw horizontal line for PE adjusted strike price
                line.new(prevDayIndex, peAdjustedStrikePrice, bar_index, peAdjustedStrikePrice, color=color.red, width=1, extend=extend.right)
                // Label the PE adjusted strike price
                label.new(prevDayIndex, peAdjustedStrikePrice, text=str.tostring(strike), color=color.red, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Calculate and draw the sum of CE close and PE close for the user-specified strike price
if barstate.islast
    // Find the correct index for the specified strike price
    targetIndex = -1
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice
            targetIndex := i
            break
    
    // If a matching strike price is found
    if targetIndex != -1
        // Determine the corresponding CE and PE indices
        ceIndex = targetIndex < numLevels * 2 + 1 ? targetIndex : targetIndex - (numLevels * 2 + 1)
        peIndex = targetIndex < numLevels * 2 + 1 ? targetIndex + (numLevels * 2 + 1) : targetIndex
        
        ceClose = array.get(combinedCloses, ceIndex)
        peClose = array.get(combinedCloses, peIndex)
        
        if not na(ceClose) and not na(peClose)
            avgCloseATM = (ceClose + peClose)/2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseATM, bar_index, avgCloseATM, color=color.olive, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseATM, "ATM", color=color.olive, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
            //Draw the SR Levels
            minor_support=strikePrice-peClose 
            minor_resistance=strikePrice+ceClose
            major_support=strikePrice-(ceClose+peClose)
            major_resistance=strikePrice+(ceClose+peClose)

            // Draw and label the support and resistance levels if the checkbox is enabled
            if showSupportResistance
                // Draw horizontal line for minor_support
                line.new(prevDayIndex, minor_support, bar_index, minor_support, color=color.black, width=1, extend=extend.right)
                
                // Label the minor_support
                label.new(prevDayIndex, minor_support, "Minor support", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

                // Draw horizontal line for minor_resistance
                line.new(prevDayIndex, minor_resistance, bar_index, minor_resistance, color=color.black, width=1, extend=extend.right)
                
                // Label the minor_resistance
                label.new(prevDayIndex, minor_resistance, "Minor resistance", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

                // Draw horizontal line for major_support
                line.new(prevDayIndex, major_support, bar_index, major_support, color=color.black, width=1, extend=extend.right)
                
                // Label the major_support
                label.new(prevDayIndex, major_support, "Major support", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
               
                // Draw horizontal line for major_resistance
                line.new(prevDayIndex, major_resistance, bar_index, major_resistance, color=color.black, width=1, extend=extend.right)
                
                // Label the major_resistance
                label.new(prevDayIndex, major_resistance, "Major resistance", color=color.black, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))
// Calculate the sum of CE previous day close of below 2nd level and PE previous day close of above 2nd level for user-defined strike price
if barstate.islast
    // Find the indices for the 2nd level below and above the user-defined strike price
    ceBelow2ndLevelIndex = -1
    peAbove2ndLevelIndex = -1
    
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice - 2 * strikeInterval and array.get(isCE, i)
            ceBelow2ndLevelIndex := i
        if array.get(combinedStrikes, i) == strikePrice + 2 * strikeInterval and not array.get(isCE, i)
            peAbove2ndLevelIndex := i
    
    // If both indices are found
    if ceBelow2ndLevelIndex != -1 and peAbove2ndLevelIndex != -1
        ceCloseBelow2ndLevel = array.get(combinedCloses, ceBelow2ndLevelIndex)
        peCloseAbove2ndLevel = array.get(combinedCloses, peAbove2ndLevelIndex)
        
        if not na(ceCloseBelow2ndLevel) and not na(peCloseAbove2ndLevel)
            avgCloseITM = (ceCloseBelow2ndLevel + peCloseAbove2ndLevel)/2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseITM, bar_index, avgCloseITM, color=color.purple, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseITM, "ITM", color=color.purple, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

// Calculate the sum of CE previous day close of above 2nd level and PE previous day close of below 2nd level for user-defined strike price
if barstate.islast
    // Find the indices for the 2nd level below and above the user-defined strike price
    ceAbove2ndLevelIndex = -1
    peBelow2ndLevelIndex = -1
    
    for i = 0 to array.size(combinedStrikes) - 1
        if array.get(combinedStrikes, i) == strikePrice + 2 * strikeInterval and array.get(isCE, i)
            ceAbove2ndLevelIndex := i
        if array.get(combinedStrikes, i) == strikePrice - 2 * strikeInterval and not array.get(isCE, i)
            peBelow2ndLevelIndex := i
    
    // If both indices are found
    if ceAbove2ndLevelIndex != -1 and peBelow2ndLevelIndex != -1
        ceCloseAbove2ndLevel = array.get(combinedCloses, ceAbove2ndLevelIndex)
        peCloseBelow2ndLevel = array.get(combinedCloses, peBelow2ndLevelIndex)
        
        if not na(ceCloseAbove2ndLevel) and not na(peCloseBelow2ndLevel)
            avgCloseOTM = (ceCloseAbove2ndLevel + peCloseBelow2ndLevel)/2
            
            // Draw horizontal line for the sum of CE close and PE close
            if showAvgCloseLevels
                line.new(prevDayIndex, avgCloseOTM, bar_index , avgCloseOTM, color=color.orange, width=1, extend=extend.right)
                
                // Label the sum with the strike price
                label.new(prevDayIndex, avgCloseOTM, "OTM", color=color.orange, textcolor=color.white, style=label.style_label_right, size=getLabelSize(labelSize))

